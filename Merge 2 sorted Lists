# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
         self.val = val
         self.next = next
         
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        output=ListNode()
        head=ListNode()
        head.next=output
        
        while list1.next!=None or list2.next!=None:
            if list1.val==list2.val:
                output.val=list1.val
                newnode=ListNode()
                newnode.val=list2.val
                output.next=newnode
                output=newnode
                list1=list1.next
                list2=list2.next
                
            if list1.val < list2.val :
                newnode=ListNode()
                newnode.val=list1.val
                output.next=newnode
                output=newnode
                list1=list1.next
            else:
                newnode=ListNode()
                newnode.val=list2.val
                output.next=newnode
                output=newnode
                list2=list2.next

        
        newnode=ListNode()
        newnode.val=list1.val
        output.next=newnode
        output=newnode
        newnode2=ListNode()
        newnode2.val=list2.val
        output.next=newnode2
        output=newnode2
        
        return head.next

l11=ListNode()
l12=ListNode()
l13=ListNode()

l21=ListNode()
l22=ListNode()
l23=ListNode()

l11.val=1
l12.val=2
l13.val=4

l21.val=1
l22.val=3
l23.val=4

l11.next=l12
l12.next=l13

l21.next=l22
l22.next=l23

obj=Solution()
ans=obj.mergeTwoLists(l11, l21)

while ans:
    print(ans.val)
    ans=ans.next
